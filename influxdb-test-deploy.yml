# --- PersistentVolumeClaim (PVC) for InfluxDB Data ---
# Requests storage, expected to be provisioned on CephFS via the specified StorageClass.
# ###my first file for a deployment when I throught keeping it all together made the most sense.  Keeping this file in the respository as a marker of how far I have come in learning###
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: influxdb-pvc # Name for the Persistent Volume Claim
  labels:
    app: influxdb
spec:
  accessModes:
    # ReadWriteOnce is usually appropriate for InfluxDB unless using specific clustering.
    # CephFS also supports ReadWriteMany (RWX) if needed, but check InfluxDB compatibility.
    - ReadWriteOnce
  resources:
    requests:
      # Set the amount of storage needed for InfluxDB data.
      storage: 10Gi # Example: 5 Gigabytes - ADJUST AS NEEDED
  # IMPORTANT: Replace with the StorageClass name for your CephFS provisioner.
  storageClassName: ceph-rbd # e.g., cephfs-sc

---
# --- InfluxDB Deployment ---
# Manages the InfluxDB Pod.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: influxdb-deployment # Name for the Deployment
  labels:
    app: influxdb
spec:
  # InfluxDB OSS typically runs as a single instance. Clustering is more complex.
  replicas: 1
  selector:
    matchLabels:
      app: influxdb # Must match labels on the Pod template
  template:
    metadata:
      labels:
        app: influxdb # Labels applied to the Pod(s)
    spec:
      containers:
      - name: influxdb # Name for the container
        # Use a specific version tag is recommended over latest
        image: influxdb:2.7.5 # Example: InfluxDB v2.7.5 image
        ports:
          # Default InfluxDB v2 API port
        - containerPort: 8086
          name: influxDB-port # Name for the port
        volumeMounts:
        - name: influxdb-data # Must match the volume name defined below
          # Mount path inside the container as requested
          mountPath: /mnt/cephfs
        # --- IMPORTANT: Configure InfluxDB to USE the mount path ---
        # You likely need environment variables or a config file to tell
        # InfluxDB where to store data. Add them here. Example for v2:
        # env:
        # - name: INFLUXD_BOLT_PATH
        #   value: "/mnt/cephfs/influxd.bolt"
        # - name: INFLUXD_ENGINE_PATH
        #   value: "/mnt/cephfs/engine"
        # - name: INFLUXD_CONFIG_PATH # If using a config file mounted elsewhere
        #   value: "/etc/influxdb2/config.yml"
        # --- Optional but Recommended: Resource Limits ---
        resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m" # 1 CPU core

      volumes:
        # Define the volume that uses the PVC
      - name: influxdb-data # Must match volumeMounts.name above
        persistentVolumeClaim:
          # Must match the metadata.name of the PVC defined above
          claimName: influxdb-pvc

---
# --- ClusterIP Service for InfluxDB ---
# Exposes InfluxDB internally within the Kubernetes cluster.
apiVersion: v1
kind: Service
metadata:
  name: influxdb-clusterip-svc # Name for the internal service
  labels:
    app: influxdb
spec:
  type: ClusterIP # Default type, stable internal IP
  selector:
    app: influxdb # Selects Pods with the 'app=influxdb' label
  ports:
  - protocol: TCP
    port: 8086         # Port the service listens on
    targetPort: 8086 # Port name or number (8086) on the Pod to forward traffic to

---
# --- NodePort Service for InfluxDB ---
# Exposes InfluxDB externally on each Node's IP address.
# Use carefully, consider LoadBalancer or Ingress for production.
apiVersion: v1
kind: Service
metadata:
  name: influxdb-nodeport-svc # Name for the external service
  labels:
    app: influxdb
spec:
  type: NodePort # Exposes the service on each Node's IP at a static port
  selector:
    app: influxdb # Selects Pods with the 'app=influxdb' label
  ports:
  - protocol: TCP
    port: 8086         # Port the service listens on internally
    targetPort: 8086 # Port name or number (8086) on the Pod to forward traffic to
    nodePort: 308086  # Optional: Specify a port in the NodePort range (30000-32767)
                      # If omitted, Kubernetes assigns a random one.
