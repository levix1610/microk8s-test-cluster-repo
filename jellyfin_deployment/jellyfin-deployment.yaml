# --- Deployment ---
# Manages the Pods running your application container.
apiVersion: apps/v1
kind: Deployment
metadata:
  # name: A unique name for your Deployment.
  name: jellyfin-deployment
  labels:
    app: jellyfin
spec:
  replicas: 1 # e.g., 2
  selector:
    # Must match the labels on the Pod template below.
    matchLabels:
      app: jellyfin
  template:
    metadata:
      # Labels applied to the Pods created by this Deployment. Must match spec.selector.matchLabels.
      labels:
        app: jellyfin
    spec:
      containers:
      - name: jellyfin
        image: lscr.io/linuxserver/jellyfin:latest # e.g., your-repo/your-app:latest
        ports:
        - containerPort: 8096 # The port your application listens on INSIDE the container (e.g., 8080)
          name: jellyfin-port # Optional name for the port
        # volumeMounts: Mounts the volume requested by the PVC into the container.
        volumeMounts:
        - name: synnfs # Must match the volume name defined below in spec.volumes
          # mountPath: The directory path inside the container where the storage will be accessible.
          mountPath: /app/data # e.g., /app/data or /var/www/html
        # --- Optional but Recommended ---
        resources:    #needs to be on name level of containers
         requests:
           memory: "256Mi"
           cpu: "500m"
         limits:
            memory: "2048Mi"
            cpu: "2000m"
        # env:
        # - name: MY_ENV_VAR
        #   value: "my_value"
        # livenessProbe: ... (configure as needed)
        # readinessProbe: ... (configure as needed)

      # volumes: Defines the volumes available to the Pod.
      volumes:
      # - name: Must match the name used in volumeMounts above.
      - name: synnfs # e.g., app-data
        # persistentVolumeClaim: Links this volume definition to the PVC created earlier.
        persistentVolumeClaim:
          # claimName: Must match the metadata.name of the PVC defined above.
          claimName: jellyfin-pvc