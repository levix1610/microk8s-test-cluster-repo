# --- PersistentVolumeClaim (PVC) ---
# This requests persistent storage from the cluster.
# The actual storage (PersistentVolume) is usually provisioned dynamically based on the StorageClass.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  # name: A unique name for your PVC. This will be referenced by the Deployment.
  name: <your-app-name>-pvc
  labels:
    app: <your-app-name>
spec:
  # accessModes: Defines how the volume can be mounted.
  # - ReadWriteOnce (RWO): Can be mounted read-write by a single node. Common for most stateful apps.
  # - ReadOnlyMany (ROX): Can be mounted read-only by many nodes.
  # - ReadWriteMany (RWX): Can be mounted read-write by many nodes (requires capable storage like NFS).
  accessModes:
    - ReadWriteOnce
  # resources: Specifies the amount of storage requested.
  resources:
    requests:
      # storage: The amount of storage required (e.g., 1Gi, 10Gi, 100Mi).
      storage: <storage-amount> # e.g., 5Gi
  # storageClassName: (Optional but often required) The type of storage to request.
  # This MUST match a StorageClass available in your cluster (e.g., 'standard', 'gp2', 'managed-premium', 'local-storage').
  # Ask your cluster administrator if you don't know what to use.
  # storageClassName: <storage-class-name>

---
# --- Deployment ---
# Manages the Pods running your application container.
apiVersion: apps/v1
kind: Deployment
metadata:
  # name: A unique name for your Deployment.
  name: <your-app-name>-deployment
  labels:
    app: <your-app-name>
spec:
  replicas: <replica-count> # e.g., 2
  selector:
    # Must match the labels on the Pod template below.
    matchLabels:
      app: <your-app-name>
  template:
    metadata:
      # Labels applied to the Pods created by this Deployment. Must match spec.selector.matchLabels.
      labels:
        app: <your-app-name>
    spec:
      containers:
      - name: <your-app-container-name>
        image: <your-docker-image>:<tag> # e.g., your-repo/your-app:latest
        ports:
        - containerPort: <container-port> # The port your application listens on INSIDE the container (e.g., 8080)
          name: http # Optional name for the port
        # volumeMounts: Mounts the volume requested by the PVC into the container.
        volumeMounts:
        - name: <your-app-storage-volume-name> # Must match the volume name defined below in spec.volumes
          # mountPath: The directory path inside the container where the storage will be accessible.
          mountPath: <path-inside-container-for-storage> # e.g., /app/data or /var/www/html
        # --- Optional but Recommended ---
        # resources:
        #   requests:
        #     memory: "64Mi"
        #     cpu: "100m"
        #   limits:
        #     memory: "128Mi"
        #     cpu: "250m"
        # env:
        # - name: MY_ENV_VAR
        #   value: "my_value"
        # livenessProbe: ... (configure as needed)
        # readinessProbe: ... (configure as needed)

      # volumes: Defines the volumes available to the Pod.
      volumes:
      # - name: Must match the name used in volumeMounts above.
      - name: <your-app-storage-volume-name> # e.g., app-data
        # persistentVolumeClaim: Links this volume definition to the PVC created earlier.
        persistentVolumeClaim:
          # claimName: Must match the metadata.name of the PVC defined above.
          claimName: <your-app-name>-pvc

---
# --- ClusterIP Service ---
# Exposes the application Pods on a stable IP address *within* the cluster.
# Other applications inside the cluster can reach your app via this Service's name and port.
apiVersion: v1
kind: Service
metadata:
  # name: A unique name for the ClusterIP service.
  name: <your-app-name>-clusterip-svc
  labels:
    app: <your-app-name>
spec:
  # type: ClusterIP is the default, but explicitly stating it is clearer.
  type: ClusterIP
  # selector: Selects the Pods to send traffic to. Must match the labels on the Pods (spec.template.metadata.labels).
  selector:
    app: <your-app-name>
  ports:
    # - protocol: Usually TCP.
  - protocol: TCP
    # port: The port number the Service will listen on *within the cluster*.
    port: <service-port> # e.g., 80
    # targetPort: The port on the Pods (containerPort) to forward traffic to. Can be the number or the name (e.g., 'http').
    targetPort: <container-port> # e.g., 8080 (must match containerPort in Deployment) or 'http' if named

---
# --- NodePort Service ---
# Exposes the application Pods on a static port on each Node's external IP address.
# Accessible from outside the cluster via <NodeIP>:<NodePort>. Use with caution or behind a load balancer in production.
apiVersion: v1
kind: Service
metadata:
  # name: A unique name for the NodePort service.
  name: <your-app-name>-nodeport-svc
  labels:
    app: <your-app-name>
spec:
  # type: NodePort makes the service accessible on each Node's IP at a specific port.
  type: NodePort
  # selector: Selects the Pods to send traffic to. Must match the labels on the Pods.
  selector:
    app: <your-app-name>
  ports:
    # - protocol: Usually TCP.
  - protocol: TCP
    # port: The port this Service listens on *within the cluster* (a ClusterIP is still assigned).
    port: <service-port> # e.g., 80
    # targetPort: The port on the Pods (containerPort) to forward traffic to.
    targetPort: <container-port> # e.g., 8080 (must match containerPort in Deployment) or 'http' if named
    # nodePort: (Optional) The static port exposed on each Node's IP.
    # If specified, must be in the configured NodePort range (default: 30000-32767).
    # If omitted, Kubernetes assigns a random available port from the range.
    # nodePort: <node-port-number> # e.g., 30080
