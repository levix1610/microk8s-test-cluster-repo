# postgres-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  # A unique name for the PostgreSQL Deployment
  name: postgres-homarr-deployment
  namespace: homarr
  labels:
    app: postgrehomarr # Label for selection by the Service
spec:
  replicas: 1 # Databases usually run as a single replica unless you configure replication
  selector:
    matchLabels:
      app: postgrehomarr # Must match the labels on the Pod template
  template:
    metadata:
      labels:
        app: postgrehomarr # Labels applied to the Pod
    spec:
      securityContext: # Need to add to run container as admin since NFS share is set to Map as admin.
        runAsUser: 1001           # Running as admin
        runAsGroup: 1001         # Running as admin
        #fsGroup: 1024
      containers:
      - name: postgres-homarr
        # Use an official Postgres image. Consider pinning to a specific version (e.g., postgres:15) for stability.
        image: postgres@sha256:feff5b24fedd610975a1f5e743c51a4b360437f4dc3a11acf740dcd708f413f6 # updated (9/17/25) # updated (10/12/25) - latest versions not working.
        ports:
        - containerPort: 5432 # Standard PostgreSQL port
          name: postgres-h-port
        # Environment variables sourced from the Secret
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-homarr-secret # Name of the Secret object
              key: POSTGRES_DB    # Key within the Secret
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-homarr-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-homarr-secret
              key: POSTGRES_PASSWORD
        # Mount the persistent volume
        volumeMounts:
        - name: postgres-homarr-data # Must match the volume name defined below
          # Default data directory for the postgres image
          mountPath: /var/lib/postgresql/data
        #security context for container:
        securityContext:
          runAsUser: 1001 #so container can modify storage as it needs.
          runAsGroup: 1001
          allowPrivilegeEscalation: false
        # --- Optional but Recommended ---
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        # readinessProbe: # Recommended to check if DB is ready
        #   exec:
        #     command: ["pg_isready", "-U", "postgres", "-d", "homarr"] # Use values from secret if not default
        #   initialDelaySeconds: 10
        #   timeoutSeconds: 5
        # livenessProbe: # Recommended to check if DB process is running
        #   exec:
        #     command: ["pg_isready", "-U", "postgres", "-d", "homarr"]
        #   initialDelaySeconds: 30
        #   timeoutSeconds: 5
      # Define the volume linked to the PVC
      volumes:
      - name: postgres-homarr-data # Must match the name in volumeMounts
        persistentVolumeClaim:
          claimName: postgre-homarr-pvc # Must match the metadata.name of the PVC
